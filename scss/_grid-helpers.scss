/**
 * Kickoff grid helpers
 */

@mixin ko-gridSpanHelper($breakpoint: null) {
	$suffix: null;

	@if $breakpoint {
		$suffix: --#{$breakpoint};
	}

	@for $i from 1 to $grid-column-count + 1 {
		$col-width: ko-gridColumnWidthCalc($i, true);
		$col-width-guttered: ko-gridColumnWidthCalc($i, true, true);

		.g-span#{$i}#{$suffix} {
			flex-basis: $col-width !important;
			flex-grow: 0;
			// need this next line for a weird IE9/10/11 bug, where adding padding to a flex-item can throw out the flex-basis and wrap the columns incorrectly
			// see this for more detail – https://github.com/philipwalton/flexbugs/issues/3
			max-width: $col-width !important;

			// maybe have an option to include this in a variable
			&.g-holdWidth#{$suffix} {
				@include ko-pixelMinWidth($i);

				.g--gutter--scaled & {
					@include ko-pixelMinWidth($i, true); // get the hold-width minus the gutter
				}
			}

			.g--gutter--scaled & {
				flex-basis: $col-width-guttered !important;
				// need this next line for a weird IE9/10/11 bug, where adding padding to a flex-item can throw out the flex-basis and wrap the columns incorrectly
				// see this for more detail – https://github.com/philipwalton/flexbugs/issues/3
				max-width: $col-width-guttered;

				@if $i < $grid-column-count {
					margin-left: ko-gutterCalc();
				}
				@else {
					margin-left: 0;
				}
			}

			@if $use-legacy-grid {

				// used in combination with modernizr or another detection mechanism
				.no-flexbox & {
					width: ko-gridColumnWidthCalc($i, true) !important;
				}

			}
			// @if $use-legacy-grid

		}
	}
}

/**
 * Grid stacking
 * Stack grids based on a given breakpoint
 *
 * Usage:
 * .g--stack--narrow
 * .g--stack--wide
 */
@mixin ko-grid-stack($breakpoint: 'wide') {
	@include media('<#{$breakpoint}') {
		flex-flow: column nowrap;

		& > .g-col {
			flex-basis: auto !important;
			max-width: 100% !important;
			margin-left: 0; // get rid of any grid margins if there are any

			@if $use-legacy-grid {
				.no-flexbox & {
					width: 100% !important;
				}
			}
		}
	}
}

/**
 * Gutter Calculations
 * Default: percent
 * Usage: ko-gutterCalc() or ko-gutterCalc(false)
 * When show-unit is true, returns the percentage, otherwise return a decimal
 */
@function ko-gutterCalc($show-unit: true) {
	@if $show-unit == true {
		@return percentage(ko-strip-units($grid-gutter-width) / ko-strip-units($layout-max-width));
	} @else {
		@return $grid-gutter-width / $layout-max-width;
	}
}



/**
 * Grid columns width calculations
 * This is where the magic of working out the column widths happens
 *
 * $column-span: define the width for the number of columns required
 * $show-unit: Switch return value between percentage (default) and decimal
 * $include-gutters: if gutters should be included in the calculations. Default = false
 * $legacy-calc: if we are working out a legacy column width calculation, or not. Default = false
 */
@function ko-gridColumnWidthCalc($column-span: 1, $show-unit: true, $include-gutters: false) {
	$number-of-blocks-in-container : $grid-column-count / $column-span;
	$total-width-of-all-blocks     : 1;

	// when including gutters, we need to adjust our % width or flex-basis appropriately
	@if $include-gutters {
		$total-width-of-all-gutters    : ko-gutterCalc(false) * ($number-of-blocks-in-container - 1);
		$total-width-of-all-blocks     : 1 - $total-width-of-all-gutters;
	}

	$width-of-a-single-block       : $total-width-of-all-blocks / $number-of-blocks-in-container;

	@if $show-unit == true {
		@return percentage(ko-strip-units($width-of-a-single-block));
	} @else {
		@return $width-of-a-single-block;
	}
}

@mixin ko-pixelMinWidth($column-span: 1, $minusGutter: false) {
	@if $minusGutter == true {
		min-width: ($layout-max-width * ko-gridColumnWidthCalc($column-span, false)) - ($layout-max-width * ko-gutterCalc(false)) + px;
	}
	@else {
		min-width: ($layout-max-width * ko-gridColumnWidthCalc($column-span, false)) + px;
	}
}


/**
 * Column width mixin
 * Usage:
 * @include column(2);
 */
@mixin column($column-span: 1) {
	width: ko-gridColumnWidthCalc($column-span, true);
}
